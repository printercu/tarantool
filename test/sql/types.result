env = require('test_run')
---
...
test_run = env.new()
---
...
-- gh-3018: typeless columns are prohibited.
--
box.execute("CREATE TABLE t1 (id PRIMARY KEY);")
---
- error: Keyword 'PRIMARY' is reserved. Please use double quotes if 'PRIMARY' is an
    identifier.
...
box.execute("CREATE TABLE t1 (a, id INT PRIMARY KEY);")
---
- error: Syntax error near ','
...
box.execute("CREATE TABLE t1 (id PRIMARY KEY, a INT);")
---
- error: Keyword 'PRIMARY' is reserved. Please use double quotes if 'PRIMARY' is an
    identifier.
...
box.execute("CREATE TABLE t1 (id INT PRIMARY KEY, a);")
---
- error: Syntax error near ')'
...
box.execute("CREATE TABLE t1 (id INT PRIMARY KEY, a INT, b UNIQUE);")
---
- error: Keyword 'UNIQUE' is reserved. Please use double quotes if 'UNIQUE' is an
    identifier.
...
-- gh-3104: real type is stored in space format.
--
box.execute("CREATE TABLE t1 (id TEXT PRIMARY KEY, a REAL, b INT, c TEXT, d SCALAR);")
---
- row_count: 1
...
box.space.T1:format()
---
- [{'type': 'string', 'nullable_action': 'abort', 'name': 'ID', 'is_nullable': false},
  {'type': 'number', 'nullable_action': 'none', 'name': 'A', 'is_nullable': true},
  {'type': 'integer', 'nullable_action': 'none', 'name': 'B', 'is_nullable': true},
  {'type': 'string', 'nullable_action': 'none', 'name': 'C', 'is_nullable': true},
  {'type': 'scalar', 'nullable_action': 'none', 'name': 'D', 'is_nullable': true}]
...
box.execute("CREATE VIEW v1 AS SELECT b + a, b - a FROM t1;")
---
- row_count: 1
...
box.space.V1:format()
---
- [{'type': 'number', 'nullable_action': 'none', 'name': 'b + a', 'is_nullable': true},
  {'type': 'number', 'nullable_action': 'none', 'name': 'b - a', 'is_nullable': true}]
...
-- gh-2494: index's part also features correct declared type.
--
box.execute("CREATE INDEX i1 ON t1 (a);")
---
- row_count: 1
...
box.execute("CREATE INDEX i2 ON t1 (b);")
---
- row_count: 1
...
box.execute("CREATE INDEX i3 ON t1 (c);")
---
- row_count: 1
...
box.execute("CREATE INDEX i4 ON t1 (id, c, b, a, d);")
---
- row_count: 1
...
box.space.T1.index.I1.parts
---
- - type: number
    is_nullable: true
    fieldno: 2
...
box.space.T1.index.I2.parts
---
- - type: integer
    is_nullable: true
    fieldno: 3
...
box.space.T1.index.I3.parts
---
- - type: string
    is_nullable: true
    fieldno: 4
...
box.space.T1.index.I4.parts
---
- - type: string
    is_nullable: false
    fieldno: 1
  - type: string
    is_nullable: true
    fieldno: 4
  - type: integer
    is_nullable: true
    fieldno: 3
  - type: number
    is_nullable: true
    fieldno: 2
  - type: scalar
    is_nullable: true
    fieldno: 5
...
box.execute("DROP VIEW v1;")
---
- row_count: 1
...
box.execute("DROP TABLE t1;")
---
- row_count: 1
...
-- gh-3906: data of type BOOL is displayed as should
-- during SQL SELECT.
--
format = {{ name = 'ID', type = 'unsigned' }, { name = 'A', type = 'boolean' }}
---
...
sp = box.schema.space.create("TEST", { format = format } )
---
...
i = sp:create_index('primary', {parts = {1, 'unsigned' }})
---
...
sp:insert({1, true})
---
- [1, true]
...
sp:insert({2, false})
---
- [2, false]
...
box.execute("SELECT * FROM test")
---
- metadata:
  - name: ID
    type: unsigned
  - name: A
    type: boolean
  rows:
  - [1, true]
  - [2, false]
...
sp:drop()
---
...
-- gh-3544: concatenation operator accepts only TEXT and BLOB.
--
box.execute("SELECT 'abc' || 1;")
---
- error: 'Inconsistent types: expected TEXT or VARBINARY got UNSIGNED'
...
box.execute("SELECT 'abc' || 1.123;")
---
- error: 'Inconsistent types: expected TEXT or VARBINARY got REAL'
...
box.execute("SELECT 1 || 'abc';")
---
- error: 'Inconsistent types: expected TEXT or VARBINARY got UNSIGNED'
...
box.execute("SELECT 1.123 || 'abc';")
---
- error: 'Inconsistent types: expected TEXT or VARBINARY got REAL'
...
box.execute("SELECt 'a' || 'b' || 1;")
---
- error: 'Inconsistent types: expected TEXT or VARBINARY got UNSIGNED'
...
-- What is more, they must be of the same type.
--
box.execute("SELECT 'abc' || randomblob(5);")
---
- error: 'Inconsistent types: expected TEXT got VARBINARY'
...
box.execute("SELECT randomblob(5) || 'x';")
---
- error: 'Inconsistent types: expected VARBINARY got TEXT'
...
-- Result of BLOBs concatenation must be BLOB.
--
box.execute("VALUES (TYPEOF(randomblob(5) || zeroblob(5)));")
---
- metadata:
  - name: column1
    type: string
  rows:
  - ['varbinary']
...
-- gh-3954: LIKE accepts only arguments of type TEXT and NULLs.
--
box.execute("CREATE TABLE t1 (s SCALAR PRIMARY KEY);")
---
- row_count: 1
...
box.execute("INSERT INTO t1 VALUES (randomblob(5));")
---
- row_count: 1
...
box.execute("SELECT * FROM t1 WHERE s LIKE 'blob';")
---
- error: 'Inconsistent types: expected TEXT got VARBINARY'
...
box.execute("SELECT * FROM t1 WHERE 'blob' LIKE s;")
---
- error: 'Inconsistent types: expected TEXT got VARBINARY'
...
box.execute("SELECT * FROM t1 WHERE 'blob' LIKE x'0000';")
---
- error: 'Inconsistent types: expected TEXT got VARBINARY'
...
box.execute("SELECT s LIKE NULL FROM t1;")
---
- metadata:
  - name: s LIKE NULL
    type: integer
  rows:
  - [null]
...
box.execute("DELETE FROM t1;")
---
- row_count: 1
...
box.execute("INSERT INTO t1 VALUES (1);")
---
- row_count: 1
...
box.execute("SELECT * FROM t1 WHERE s LIKE 'int';")
---
- error: 'Inconsistent types: expected TEXT got UNSIGNED'
...
box.execute("SELECT * FROM t1 WHERE 'int' LIKE 4;")
---
- error: 'Inconsistent types: expected TEXT got UNSIGNED'
...
box.execute("SELECT NULL LIKE s FROM t1;")
---
- metadata:
  - name: NULL LIKE s
    type: integer
  rows:
  - [null]
...
box.space.T1:drop()
---
...
-- gh-4229: allow explicit cast from string to integer for string
-- values containing quoted floating point literals.
--
box.execute("SELECT CAST('1.123' AS INTEGER);")
---
- metadata:
  - name: CAST('1.123' AS INTEGER)
    type: integer
  rows:
  - [1]
...
box.execute("CREATE TABLE t1 (f TEXT PRIMARY KEY);")
---
- row_count: 1
...
box.execute("INSERT INTO t1 VALUES('0.0'), ('1.5'), ('3.9312453');")
---
- row_count: 3
...
box.execute("SELECT CAST(f AS INTEGER) FROM t1;")
---
- metadata:
  - name: CAST(f AS INTEGER)
    type: integer
  rows:
  - [0]
  - [1]
  - [3]
...
box.space.T1:drop()
---
...
-- Test basic capabilities of boolean type.
--
box.execute("SELECT true;")
---
- metadata:
  - name: 'true'
    type: boolean
  rows:
  - [true]
...
box.execute("SELECT false;")
---
- metadata:
  - name: 'false'
    type: boolean
  rows:
  - [false]
...
box.execute("SELECT unknown;")
---
- metadata:
  - name: unknown
    type: scalar
  rows:
  - [null]
...
box.execute("SELECT true = false;")
---
- metadata:
  - name: true = false
    type: boolean
  rows:
  - [false]
...
box.execute("SELECT true = true;")
---
- metadata:
  - name: true = true
    type: boolean
  rows:
  - [true]
...
box.execute("SELECT true > false;")
---
- metadata:
  - name: true > false
    type: boolean
  rows:
  - [true]
...
box.execute("SELECT true < false;")
---
- metadata:
  - name: true < false
    type: boolean
  rows:
  - [false]
...
box.execute("SELECT null = true;")
---
- metadata:
  - name: null = true
    type: boolean
  rows:
  - [null]
...
box.execute("SELECT unknown = true;")
---
- metadata:
  - name: unknown = true
    type: boolean
  rows:
  - [null]
...
box.execute("SELECT 1 = true;")
---
- error: 'Type mismatch: can not convert UNSIGNED to BOOLEAN'
...
box.execute("SELECT 'abc' = true;")
---
- error: 'Type mismatch: can not convert TEXT to BOOLEAN'
...
box.execute("SELECT 1.123 > true;")
---
- error: 'Type mismatch: can not convert REAL to BOOLEAN'
...
box.execute("SELECT true IN (1, 'abc', true)")
---
- metadata:
  - name: true IN (1, 'abc', true)
    type: boolean
  rows:
  - [true]
...
box.execute("SELECT true IN (1, 'abc', false)")
---
- metadata:
  - name: true IN (1, 'abc', false)
    type: boolean
  rows:
  - [false]
...
box.execute("SELECT 1 LIMIT true;")
---
- error: 'Failed to execute SQL statement: Only positive integers are allowed in the
    LIMIT clause'
...
box.execute("SELECT 1 LIMIT 1 OFFSET true;")
---
- error: 'Failed to execute SQL statement: Only positive integers are allowed in the
    OFFSET clause'
...
box.execute("SELECT 'abc' || true;")
---
- error: 'Inconsistent types: expected TEXT or VARBINARY got BOOLEAN'
...
-- Boolean can take part in arithmetic operations.
--
box.execute("SELECT true + false;")
---
- error: 'Type mismatch: can not convert false to numeric'
...
box.execute("SELECT true * 1;")
---
- error: 'Type mismatch: can not convert true to numeric'
...
box.execute("SELECT false / 0;")
---
- error: 'Type mismatch: can not convert false to numeric'
...
box.execute("SELECT not true;")
---
- metadata:
  - name: not true
    type: boolean
  rows:
  - [false]
...
box.execute("SELECT ~true;")
---
- error: 'Type mismatch: can not convert true to integer'
...
box.execute("SELECT -true;")
---
- error: 'Type mismatch: can not convert true to numeric'
...
box.execute("SELECT true << 1;")
---
- error: 'Type mismatch: can not convert true to integer'
...
box.execute("SELECT true | 1;")
---
- error: 'Type mismatch: can not convert true to integer'
...
box.execute("SELECT true and false;")
---
- metadata:
  - name: true and false
    type: boolean
  rows:
  - [false]
...
box.execute("SELECT true or unknown;")
---
- metadata:
  - name: true or unknown
    type: boolean
  rows:
  - [true]
...
box.execute("CREATE TABLE t (id INT PRIMARY KEY, b BOOLEAN);")
---
- row_count: 1
...
box.execute("INSERT INTO t VALUES (1, true);")
---
- row_count: 1
...
box.execute("INSERT INTO t VALUES (2, false);")
---
- row_count: 1
...
box.execute("INSERT INTO t VALUES (3, unknown)")
---
- row_count: 1
...
box.execute("SELECT b FROM t;")
---
- metadata:
  - name: B
    type: boolean
  rows:
  - [true]
  - [false]
  - [null]
...
box.execute("SELECT b FROM t WHERE b = false;")
---
- metadata:
  - name: B
    type: boolean
  rows:
  - [false]
...
box.execute("SELECT b FROM t WHERE b IS NULL;")
---
- metadata:
  - name: B
    type: boolean
  rows:
  - [null]
...
box.execute("SELECT b FROM t WHERE b IN (false, 1, 'abc')")
---
- metadata:
  - name: B
    type: boolean
  rows:
  - [false]
...
box.execute("SELECT b FROM t WHERE b BETWEEN false AND true;")
---
- metadata:
  - name: B
    type: boolean
  rows:
  - [true]
  - [false]
...
box.execute("SELECT b FROM t WHERE b BETWEEN true AND false;")
---
- metadata:
  - name: B
    type: boolean
  rows: []
...
box.execute("SELECT b FROM t ORDER BY b;")
---
- metadata:
  - name: B
    type: boolean
  rows:
  - [null]
  - [false]
  - [true]
...
box.execute("SELECT b FROM t ORDER BY +b;")
---
- metadata:
  - name: B
    type: boolean
  rows:
  - [null]
  - [false]
  - [true]
...
box.execute("SELECT b FROM t ORDER BY b LIMIT 1;")
---
- metadata:
  - name: B
    type: boolean
  rows:
  - [null]
...
box.execute("SELECT b FROM t GROUP BY b LIMIT 1;")
---
- metadata:
  - name: B
    type: boolean
  rows:
  - [null]
...
box.execute("SELECT b FROM t LIMIT true;")
---
- error: 'Failed to execute SQL statement: Only positive integers are allowed in the
    LIMIT clause'
...
-- Most of aggregates don't accept boolean arguments.
--
box.execute("SELECT sum(b) FROM t;")
---
- error: 'Type mismatch: can not convert true to number'
...
box.execute("SELECT avg(b) FROM t;")
---
- error: 'Type mismatch: can not convert true to number'
...
box.execute("SELECT total(b) FROM t;")
---
- error: 'Type mismatch: can not convert true to number'
...
box.execute("SELECT min(b) FROM t;")
---
- metadata:
  - name: min(b)
    type: scalar
  rows:
  - [false]
...
box.execute("SELECT max(b) FROM t;")
---
- metadata:
  - name: max(b)
    type: scalar
  rows:
  - [true]
...
box.execute("SELECT count(b) FROM t;")
---
- metadata:
  - name: count(b)
    type: integer
  rows:
  - [2]
...
box.execute("SELECT group_concat(b) FROM t;")
---
- metadata:
  - name: group_concat(b)
    type: string
  rows:
  - ['true,false']
...
-- Check other built-in functions.
--
box.execute("SELECT lower(b) FROM t;")
---
- metadata:
  - name: lower(b)
    type: string
  rows:
  - ['true']
  - ['false']
  - [null]
...
box.execute("SELECT upper(b) FROM t;")
---
- metadata:
  - name: upper(b)
    type: string
  rows:
  - ['TRUE']
  - ['FALSE']
  - [null]
...
box.execute("SELECT abs(b) FROM t;")
---
- error: 'Inconsistent types: expected number got BOOLEAN'
...
box.execute("SELECT typeof(b) FROM t;")
---
- metadata:
  - name: typeof(b)
    type: string
  rows:
  - ['boolean']
  - ['boolean']
  - ['null']
...
box.execute("SELECT quote(b) FROM t;")
---
- metadata:
  - name: quote(b)
    type: string
  rows:
  - ['true']
  - ['false']
  - ['NULL']
...
box.execute("SELECT min(b, true) FROM t;")
---
- metadata:
  - name: min(b, true)
    type: scalar
  rows:
  - [true]
  - [false]
  - [null]
...
box.execute("SELECT quote(b) FROM t;")
---
- metadata:
  - name: quote(b)
    type: string
  rows:
  - ['true']
  - ['false']
  - ['NULL']
...
-- Test index search using boolean values.
--
box.execute("CREATE INDEX ib ON t(b);")
---
- row_count: 1
...
box.execute("SELECT b FROM t WHERE b = false;")
---
- metadata:
  - name: B
    type: boolean
  rows:
  - [false]
...
box.execute("SELECT b FROM t WHERE b OR unknown ORDER BY b;")
---
- metadata:
  - name: B
    type: boolean
  rows:
  - [true]
...
-- Test UPDATE on boolean field.
--
box.execute("UPDATE t SET b = true WHERE b = false;")
---
- row_count: 1
...
box.execute("SELECT b FROM t;")
---
- metadata:
  - name: B
    type: boolean
  rows:
  - [true]
  - [true]
  - [null]
...
-- Test constraints functionality.
--
box.execute("CREATE TABLE parent (id INT PRIMARY KEY, a BOOLEAN UNIQUE);")
---
- row_count: 1
...
box.space.T:truncate()
---
...
box.execute("ALTER TABLE t ADD CONSTRAINT fk1 FOREIGN KEY (b) REFERENCES parent (a);")
---
- row_count: 1
...
box.execute("INSERT INTO t VALUES (1, true);")
---
- error: 'Failed to execute SQL statement: FOREIGN KEY constraint failed'
...
box.execute("INSERT INTO parent VALUES (1, true);")
---
- row_count: 1
...
box.execute("INSERT INTO t VALUES (1, true);")
---
- row_count: 1
...
box.execute("ALTER TABLE t DROP CONSTRAINT fk1;")
---
- row_count: 1
...
box.space.PARENT:drop()
---
...
box.execute("CREATE TABLE t1 (id INT PRIMARY KEY, a BOOLEAN CHECK (a = true));")
---
- row_count: 1
...
box.execute("INSERT INTO t1 VALUES (1, false);")
---
- error: 'Check constraint failed ''CK_CONSTRAINT_1_T1'': a = true'
...
box.execute("INSERT INTO t1 VALUES (1, true);")
---
- row_count: 1
...
box.space.T1:drop()
---
...
box.execute("CREATE TABLE t1 (id INT PRIMARY KEY, a BOOLEAN DEFAULT true);")
---
- row_count: 1
...
box.execute("INSERT INTO t1 (id) VALUES (1);")
---
- row_count: 1
...
box.space.T1:select()
---
- - [1, true]
...
box.space.T1:drop()
---
...
-- Check that VIEW inherits boolean type.
--
box.execute("CREATE VIEW v AS SELECT b FROM t;")
---
- row_count: 1
...
box.space.V:format()[1]['type']
---
- boolean
...
box.space.V:drop()
---
...
-- Test CAST facilities.
--
box.execute("SELECT CAST(true AS INTEGER);")
---
- metadata:
  - name: CAST(true AS INTEGER)
    type: integer
  rows:
  - [1]
...
box.execute("SELECT CAST(true AS TEXT);")
---
- metadata:
  - name: CAST(true AS TEXT)
    type: string
  rows:
  - ['TRUE']
...
box.execute("SELECT CAST(true AS FLOAT);")
---
- error: 'Type mismatch: can not convert true to number'
...
box.execute("SELECT CAST(true AS SCALAR);")
---
- metadata:
  - name: CAST(true AS SCALAR)
    type: scalar
  rows:
  - [true]
...
box.execute("SELECT CAST(1 AS BOOLEAN);")
---
- metadata:
  - name: CAST(1 AS BOOLEAN)
    type: boolean
  rows:
  - [true]
...
box.execute("SELECT CAST(1.123 AS BOOLEAN);")
---
- metadata:
  - name: CAST(1.123 AS BOOLEAN)
    type: boolean
  rows:
  - [true]
...
box.execute("SELECT CAST(0.0 AS BOOLEAN);")
---
- metadata:
  - name: CAST(0.0 AS BOOLEAN)
    type: boolean
  rows:
  - [false]
...
box.execute("SELECT CAST(0.00000001 AS BOOLEAN);")
---
- metadata:
  - name: CAST(0.00000001 AS BOOLEAN)
    type: boolean
  rows:
  - [true]
...
box.execute("SELECT CAST('abc' AS BOOLEAN);")
---
- error: 'Type mismatch: can not convert abc to boolean'
...
box.execute("SELECT CAST('  TrUe' AS BOOLEAN);")
---
- metadata:
  - name: CAST('  TrUe' AS BOOLEAN)
    type: boolean
  rows:
  - [true]
...
box.execute("SELECT CAST('  falsE    ' AS BOOLEAN);")
---
- metadata:
  - name: CAST('  falsE    ' AS BOOLEAN)
    type: boolean
  rows:
  - [false]
...
box.execute("SELECT CAST('  fals' AS BOOLEAN);")
---
- error: 'Type mismatch: can not convert   fals to boolean'
...
box.execute("SELECT CAST(X'4D6564766564' AS BOOLEAN);")
---
- error: 'Type mismatch: can not convert Medved to boolean'
...
-- Make sure that SCALAR can handle boolean values.
--
box.execute("CREATE TABLE t1 (id INT PRIMARY KEY, s SCALAR);")
---
- row_count: 1
...
box.execute("INSERT INTO t1 SELECT * FROM t;")
---
- row_count: 1
...
box.execute("SELECT s FROM t1 WHERE s = true;")
---
- metadata:
  - name: S
    type: scalar
  rows:
  - [true]
...
box.execute("INSERT INTO t1 VALUES (3, 'abc'), (4, 12.5);")
---
- row_count: 2
...
box.execute("SELECT s FROM t1 WHERE s = true;")
---
- error: 'Type mismatch: can not convert TEXT to BOOLEAN'
...
box.execute("SELECT s FROM t1 WHERE s < true;")
---
- error: 'Type mismatch: can not convert TEXT to BOOLEAN'
...
box.execute("SELECT s FROM t1 WHERE s IN (true, 1, 'abcd')")
---
- metadata:
  - name: S
    type: scalar
  rows:
  - [true]
...
box.space.T:drop()
---
...
box.space.T1:drop()
---
...
-- Make sure that BOOLEAN is not implicitly converted to INTEGER
-- while inserted to PRIMARY KEY field.
--
box.execute("CREATE TABLE t1 (id INT PRIMARY KEY);")
---
- row_count: 1
...
box.execute("INSERT INTO t1 VALUES (true);")
---
- error: 'Type mismatch: can not convert true to integer'
...
box.space.T1:drop()
---
...
--
-- gh-4103: If resulting value of arithmetic operations is
-- integers, then make sure its type also integer (not number).
--
box.execute('SELECT 1 + 1;')
---
- metadata:
  - name: 1 + 1
    type: integer
  rows:
  - [2]
...
box.execute('SELECT 1 + 1.1;')
---
- metadata:
  - name: 1 + 1.1
    type: number
  rows:
  - [2.1]
...
box.execute('SELECT \'9223372036854\' + 1;')
---
- metadata:
  - name: '''9223372036854'' + 1'
    type: integer
  rows:
  - [9223372036855]
...
-- Fix BOOLEAN bindings.
box.execute('SELECT ?', {true})
---
- metadata:
  - name: '?'
    type: BOOLEAN
  rows:
  - [true]
...
-- gh-4187: make sure that value passsed to the iterator has
-- the same type as indexed fields.
--
box.execute("CREATE TABLE tboolean (s1 BOOLEAN PRIMARY KEY);")
---
- row_count: 1
...
box.execute("INSERT INTO tboolean VALUES (TRUE);")
---
- row_count: 1
...
box.execute("SELECT * FROM tboolean WHERE s1 = x'44';")
---
- error: 'Type mismatch: can not convert D to boolean'
...
box.execute("SELECT * FROM tboolean WHERE s1 = 'abc';")
---
- error: 'Type mismatch: can not convert abc to boolean'
...
box.execute("SELECT * FROM tboolean WHERE s1 = 1;")
---
- error: 'Type mismatch: can not convert UNSIGNED to BOOLEAN'
...
box.execute("SELECT * FROM tboolean WHERE s1 = 1.123;")
---
- error: 'Type mismatch: can not convert REAL to BOOLEAN'
...
box.space.TBOOLEAN:drop()
---
...
box.execute("CREATE TABLE t1(id INT PRIMARY KEY, a INT UNIQUE);")
---
- row_count: 1
...
box.execute("INSERT INTO t1 VALUES (1, 1);")
---
- row_count: 1
...
box.execute("SELECT a FROM t1 WHERE a IN (1.1, 2.1);")
---
- metadata:
  - name: A
    type: integer
  rows: []
...
box.execute("SELECT a FROM t1 WHERE a = 1.1;")
---
- metadata:
  - name: A
    type: integer
  rows: []
...
box.execute("SELECT a FROM t1 WHERE a = 1.0;")
---
- metadata:
  - name: A
    type: integer
  rows:
  - [1]
...
box.execute("SELECT a FROM t1 WHERE a > 1.1;")
---
- metadata:
  - name: A
    type: integer
  rows: []
...
box.execute("SELECT a FROM t1 WHERE a < 1.1;")
---
- metadata:
  - name: A
    type: integer
  rows:
  - [1]
...
box.space.T1:drop()
---
...
box.execute("CREATE TABLE t1(id INT PRIMARY KEY, a INT, b INT);")
---
- row_count: 1
...
box.execute("CREATE INDEX i1 ON t1(a, b);")
---
- row_count: 1
...
box.execute("INSERT INTO t1 VALUES (1, 1, 1);")
---
- row_count: 1
...
box.execute("SELECT a FROM t1 WHERE a = 1.0 AND b > 0.5;")
---
- metadata:
  - name: A
    type: integer
  rows:
  - [1]
...
box.execute("SELECT a FROM t1 WHERE a = 1.5 AND b IS NULL;")
---
- metadata:
  - name: A
    type: integer
  rows: []
...
box.execute("SELECT a FROM t1 WHERE a IS NULL AND b IS NULL;")
---
- metadata:
  - name: A
    type: integer
  rows: []
...
box.space.T1:drop()
---
...
format = {}
---
...
format[1] = { name = 'ID', type = 'unsigned' }
---
...
format[2] = { name = 'A', type = 'unsigned' }
---
...
s = box.schema.create_space('T1', { format = format })
---
...
_ = s:create_index('pk')
---
...
_ = s:create_index('sk', { parts = { 'A' } })
---
...
s:insert({ 1, 1 })
---
- [1, 1]
...
box.execute("SELECT a FROM t1 WHERE a IN (1.1, 2.1);")
---
- metadata:
  - name: A
    type: unsigned
  rows: []
...
s:drop()
---
...
<<<<<<< HEAD
---
- error: '[string "<<<<<<< HEAD "]:1: unexpected symbol near ''<'''
...
-- gh-3810: range of integer is extended up to 2^64 - 1.
--
box.execute("SELECT 18446744073709551615 > 18446744073709551614;")
---
- metadata:
  - name: 18446744073709551615 > 18446744073709551614
    type: boolean
  rows:
  - [true]
...
box.execute("SELECT 18446744073709551615 > -9223372036854775808;")
---
- metadata:
  - name: 18446744073709551615 > -9223372036854775808
    type: boolean
  rows:
  - [true]
...
box.execute("SELECT -1 < 18446744073709551615;")
---
- metadata:
  - name: -1 < 18446744073709551615
    type: boolean
  rows:
  - [true]
...
box.execute("SELECT 1.5 < 18446744073709551615")
---
- metadata:
  - name: 1.5 < 18446744073709551615
    type: boolean
  rows:
  - [true]
...
box.execute("SELECT 1.5 > 18446744073709551615")
---
- metadata:
  - name: 1.5 > 18446744073709551615
    type: boolean
  rows:
  - [false]
...
box.execute("SELECT 18446744073709551615 > 1.5")
---
- metadata:
  - name: 18446744073709551615 > 1.5
    type: boolean
  rows:
  - [true]
...
box.execute("SELECT 18446744073709551615 < 1.5")
---
- metadata:
  - name: 18446744073709551615 < 1.5
    type: boolean
  rows:
  - [false]
...
box.execute("SELECT 18446744073709551615 = 18446744073709551615;")
---
- metadata:
  - name: 18446744073709551615 = 18446744073709551615
    type: boolean
  rows:
  - [true]
...
box.execute("SELECT 18446744073709551615 > -9223372036854775808;")
---
- metadata:
  - name: 18446744073709551615 > -9223372036854775808
    type: boolean
  rows:
  - [true]
...
box.execute("SELECT 18446744073709551615 < -9223372036854775808;")
---
- metadata:
  - name: 18446744073709551615 < -9223372036854775808
    type: boolean
  rows:
  - [false]
...
box.execute("SELECT -1 < 18446744073709551615;")
---
- metadata:
  - name: -1 < 18446744073709551615
    type: boolean
  rows:
  - [true]
...
box.execute("SELECT -1 > 18446744073709551615;")
---
- metadata:
  - name: -1 > 18446744073709551615
    type: boolean
  rows:
  - [false]
...
box.execute("SELECT 18446744073709551610 - 18446744073709551615;")
---
- metadata:
  - name: 18446744073709551610 - 18446744073709551615
    type: integer
  rows:
  - [-5]
...
box.execute("SELECT 18446744073709551615 = null;")
---
- metadata:
  - name: 18446744073709551615 = null
    type: boolean
  rows:
  - [null]
...
box.execute("SELECT 18446744073709551615 = 18446744073709551615.0;")
---
- metadata:
  - name: 18446744073709551615 = 18446744073709551615.0
    type: boolean
  rows:
  - [false]
...
box.execute("SELECT 18446744073709551615.0 > 18446744073709551615")
---
- metadata:
  - name: 18446744073709551615.0 > 18446744073709551615
    type: boolean
  rows:
  - [false]
...
box.execute("SELECT 18446744073709551615 IN ('18446744073709551615', 18446744073709551615.0)")
---
- metadata:
  - name: 18446744073709551615 IN ('18446744073709551615', 18446744073709551615.0)
    type: boolean
  rows:
  - [true]
...
box.execute("SELECT 1 LIMIT 18446744073709551615;")
---
- metadata:
  - name: '1'
    type: integer
  rows:
  - [1]
...
box.execute("SELECT 1 LIMIT 1 OFFSET 18446744073709551614;")
---
- metadata:
  - name: '1'
    type: integer
  rows: []
...
box.execute("SELECT CAST('18446744073' || '709551616' AS INTEGER);")
---
- error: 'Type mismatch: can not convert 18446744073709551616 to integer'
...
box.execute("SELECT CAST('18446744073' || '709551615' AS INTEGER);")
---
- metadata:
  - name: CAST('18446744073' || '709551615' AS INTEGER)
    type: integer
  rows:
  - [18446744073709551615]
...
box.execute("SELECT 18446744073709551610 + 5;")
---
- metadata:
  - name: 18446744073709551610 + 5
    type: integer
  rows:
  - [18446744073709551615]
...
box.execute("SELECT 18446744073709551615 * 1;")
---
- metadata:
  - name: 18446744073709551615 * 1
    type: integer
  rows:
  - [18446744073709551615]
...
box.execute("SELECT 1 / 18446744073709551615;")
---
- metadata:
  - name: 1 / 18446744073709551615
    type: integer
  rows:
  - [0]
...
box.execute("SELECT 18446744073709551615 / 18446744073709551615;")
---
- metadata:
  - name: 18446744073709551615 / 18446744073709551615
    type: integer
  rows:
  - [1]
...
box.execute("SELECT 18446744073709551615 / -9223372036854775808;")
---
- metadata:
  - name: 18446744073709551615 / -9223372036854775808
    type: integer
  rows:
  - [-1]
...
box.execute("SELECT 0 - 18446744073709551610;")
---
- error: 'Failed to execute SQL statement: integer is overflowed'
...
box.execute("CREATE TABLE t (id INT PRIMARY KEY, i INT);")
---
- row_count: 1
...
box.execute("INSERT INTO t VALUES (1, 18446744073709551615);")
---
- row_count: 1
...
box.execute("INSERT INTO t VALUES (2, 18446744073709551614);")
---
- row_count: 1
...
box.execute("INSERT INTO t VALUES (3, 18446744073709551613)")
---
- row_count: 1
...
box.execute("SELECT i FROM t;")
---
- metadata:
  - name: I
    type: integer
  rows:
  - [18446744073709551615]
  - [18446744073709551614]
  - [18446744073709551613]
...
box.execute("SELECT i FROM t WHERE i = 18446744073709551615;")
---
- metadata:
  - name: I
    type: integer
  rows:
  - [18446744073709551615]
...
box.execute("SELECT i FROM t WHERE i BETWEEN 18446744073709551613 AND 18446744073709551615;")
---
- metadata:
  - name: I
    type: integer
  rows:
  - [18446744073709551615]
  - [18446744073709551614]
  - [18446744073709551613]
...
box.execute("SELECT i FROM t ORDER BY i;")
---
- metadata:
  - name: I
    type: integer
  rows:
  - [18446744073709551613]
  - [18446744073709551614]
  - [18446744073709551615]
...
box.execute("SELECT i FROM t ORDER BY -i;")
---
- error: 'Failed to execute SQL statement: integer is overflowed'
...
box.execute("SELECT i FROM t ORDER BY i LIMIT 1;")
---
- metadata:
  - name: I
    type: integer
  rows:
  - [18446744073709551613]
...
-- Test that built-in functions are capable of handling unsigneds.
--
box.execute("DELETE FROM t WHERE i > 18446744073709551613;")
---
- row_count: 2
...
box.execute("INSERT INTO t VALUES (1, 1);")
---
- row_count: 1
...
box.execute("INSERT INTO t VALUES (2, -1);")
---
- row_count: 1
...
box.execute("SELECT sum(i) FROM t;")
---
- metadata:
  - name: sum(i)
    type: number
  rows:
  - [18446744073709551613]
...
box.execute("SELECT avg(i) FROM t;")
---
- metadata:
  - name: avg(i)
    type: number
  rows:
  - [6148914691236516864]
...
box.execute("SELECT total(i) FROM t;")
---
- metadata:
  - name: total(i)
    type: number
  rows:
  - [1.844674407371e+19]
...
box.execute("SELECT min(i) FROM t;")
---
- metadata:
  - name: min(i)
    type: scalar
  rows:
  - [-1]
...
box.execute("SELECT max(i) FROM t;")
---
- metadata:
  - name: max(i)
    type: scalar
  rows:
  - [18446744073709551613]
...
box.execute("SELECT count(i) FROM t;")
---
- metadata:
  - name: count(i)
    type: integer
  rows:
  - [3]
...
box.execute("SELECT group_concat(i) FROM t;")
---
- metadata:
  - name: group_concat(i)
    type: string
  rows:
  - ['1,-1,18446744073709551613']
...
box.execute("DELETE FROM t WHERE i < 18446744073709551613;")
---
- row_count: 2
...
box.execute("SELECT lower(i) FROM t;")
---
- metadata:
  - name: lower(i)
    type: string
  rows:
  - ['18446744073709551613']
...
box.execute("SELECT upper(i) FROM t;")
---
- metadata:
  - name: upper(i)
    type: string
  rows:
  - ['18446744073709551613']
...
box.execute("SELECT abs(i) FROM t;")
---
- metadata:
  - name: abs(i)
    type: number
  rows:
  - [18446744073709551613]
...
box.execute("SELECT typeof(i) FROM t;")
---
- metadata:
  - name: typeof(i)
    type: string
  rows:
  - ['integer']
...
box.execute("SELECT quote(i) FROM t;")
---
- metadata:
  - name: quote(i)
    type: string
  rows:
  - [18446744073709551613]
...
box.execute("SELECT min(-1, i) FROM t;")
---
- metadata:
  - name: min(-1, i)
    type: scalar
  rows:
  - [-1]
...
box.execute("SELECT quote(i) FROM t;")
---
- metadata:
  - name: quote(i)
    type: string
  rows:
  - [18446744073709551613]
...
box.execute("CREATE INDEX i ON t(i);")
---
- row_count: 1
...
box.execute("SELECT i FROM t WHERE i = 18446744073709551613;")
---
- metadata:
  - name: I
    type: integer
  rows:
  - [18446744073709551613]
...
box.execute("SELECT i FROM t WHERE i >= 18446744073709551613 ORDER BY i;")
---
- metadata:
  - name: I
    type: integer
  rows:
  - [18446744073709551613]
...
box.execute("UPDATE t SET i = 18446744073709551615 WHERE i = 18446744073709551613;")
---
- row_count: 1
...
box.execute("SELECT i FROM t;")
---
- metadata:
  - name: I
    type: integer
  rows:
  - [18446744073709551615]
...
-- Test constraints functionality.
--
box.execute("CREATE TABLE parent (id INT PRIMARY KEY, a INT UNIQUE);")
---
- row_count: 1
...
box.execute("INSERT INTO parent VALUES (1, 18446744073709551613);")
---
- row_count: 1
...
box.space.T:truncate()
---
...
box.execute("ALTER TABLE t ADD CONSTRAINT fk1 FOREIGN KEY (i) REFERENCES parent (a);")
---
- row_count: 1
...
box.execute("INSERT INTO t VALUES (1, 18446744073709551615);")
---
- error: 'Failed to execute SQL statement: FOREIGN KEY constraint failed'
...
box.execute("INSERT INTO parent VALUES (2, 18446744073709551615);")
---
- row_count: 1
...
box.execute("INSERT INTO t VALUES (1, 18446744073709551615);")
---
- row_count: 1
...
box.execute("ALTER TABLE t DROP CONSTRAINT fk1;")
---
- row_count: 1
...
box.space.PARENT:drop()
---
...
box.space.T:drop()
---
...
box.execute("CREATE TABLE t1 (id INT PRIMARY KEY, a INT CHECK (a > 18446744073709551612));")
---
- row_count: 1
...
box.execute("INSERT INTO t1 VALUES (1, 18446744073709551611);")
---
- error: 'Check constraint failed ''CK_CONSTRAINT_1_T1'': a > 18446744073709551612'
...
box.execute("INSERT INTO t1 VALUES (1, -1);")
---
- error: 'Check constraint failed ''CK_CONSTRAINT_1_T1'': a > 18446744073709551612'
...
box.space.T1:drop()
---
...
box.execute("CREATE TABLE t1 (id INT PRIMARY KEY, a INT DEFAULT 18446744073709551615);")
---
- row_count: 1
...
box.execute("INSERT INTO t1 (id) VALUES (1);")
---
- row_count: 1
...
box.space.T1:select()
---
- - [1, 18446744073709551615]
...
box.space.T1:drop()
---
...
-- Test that autoincrement accepts only max 2^63 - 1 .
--
box.execute("CREATE TABLE t1 (id INT PRIMARY KEY AUTOINCREMENT);")
---
- row_count: 1
...
box.execute("INSERT INTO t1 VALUES (18446744073709551615);")
---
- row_count: 1
...
box.execute("INSERT INTO t1 VALUES (NULL);")
---
- autoincrement_ids:
  - 1
  row_count: 1
...
box.space.T1:drop()
---
...
-- Test CAST facilities.
--
box.execute("SELECT CAST(18446744073709551615 AS FLOAT);")
---
- metadata:
  - name: CAST(18446744073709551615 AS FLOAT)
    type: number
  rows:
  - [1.844674407371e+19]
...
box.execute("SELECT CAST(18446744073709551615 AS TEXT);")
---
- metadata:
  - name: CAST(18446744073709551615 AS TEXT)
    type: string
  rows:
  - ['18446744073709551615']
...
box.execute("SELECT CAST(18446744073709551615 AS SCALAR);")
---
- metadata:
  - name: CAST(18446744073709551615 AS SCALAR)
    type: scalar
  rows:
  - [18446744073709551615]
...
box.execute("SELECT CAST(18446744073709551615 AS BOOLEAN);")
---
- metadata:
  - name: CAST(18446744073709551615 AS BOOLEAN)
    type: boolean
  rows:
  - [true]
...
box.execute("SELECT CAST('18446744073709551615' AS INTEGER);")
---
- metadata:
  - name: CAST('18446744073709551615' AS INTEGER)
    type: integer
  rows:
  - [18446744073709551615]
...
-- gh-4015: introduce unsigned type in SQL.
--
box.execute("CREATE TABLE t1 (id UNSIGNED PRIMARY KEY);")
---
- row_count: 1
...
box.execute("INSERT INTO t1 VALUES (0), (1), (2);")
---
- row_count: 3
...
box.execute("INSERT INTO t1 VALUES (-3);")
---
- error: 'Type mismatch: can not convert -3 to unsigned'
...
box.execute("SELECT id FROM t1;")
---
- metadata:
  - name: ID
    type: unsigned
  rows:
  - [0]
  - [1]
  - [2]
...
box.execute("SELECT CAST(123 AS UNSIGNED);")
---
- metadata:
  - name: CAST(123 AS UNSIGNED)
    type: unsigned
  rows:
  - [123]
...
box.execute("SELECT CAST(-123 AS UNSIGNED);")
---
- error: 'Type mismatch: can not convert -123 to unsigned'
...
box.execute("SELECT CAST(1.5 AS UNSIGNED);")
---
- metadata:
  - name: CAST(1.5 AS UNSIGNED)
    type: unsigned
  rows:
  - [1]
...
box.execute("SELECT CAST(-1.5 AS UNSIGNED);")
---
- error: 'Type mismatch: can not convert -1 to unsigned'
...
box.execute("SELECT CAST(true AS UNSIGNED);")
---
- metadata:
  - name: CAST(true AS UNSIGNED)
    type: unsigned
  rows:
  - [1]
...
box.execute("SELECT CAST('123' AS UNSIGNED);")
---
- metadata:
  - name: CAST('123' AS UNSIGNED)
    type: unsigned
  rows:
  - [123]
...
box.execute("SELECT CAST('-123' AS UNSIGNED);")
---
- error: 'Type mismatch: can not convert -123 to unsigned'
...
box.space.T1:drop()
---
...
-- Make sure that CASE-THEN statement return type is SCALAR in
-- case two THEN clauses feature different types.
--
box.execute("SELECT CASE 1 WHEN 1 THEN x'0000000000' WHEN 2 THEN 'str' END")
---
- metadata:
  - name: CASE 1 WHEN 1 THEN x'0000000000' WHEN 2 THEN 'str' END
    type: scalar
  rows:
  - ["\0\0\0\0\0"]
...
box.execute("SELECT CASE 1 WHEN 1 THEN 666 WHEN 2 THEN 123 END")
---
- metadata:
  - name: CASE 1 WHEN 1 THEN 666 WHEN 2 THEN 123 END
    type: integer
  rows:
  - [666]
...
box.execute("SELECT CASE 1 WHEN 1 THEN 666 WHEN 2 THEN 123 ELSE 321 END")
---
- metadata:
  - name: CASE 1 WHEN 1 THEN 666 WHEN 2 THEN 123 ELSE 321 END
    type: integer
  rows:
  - [666]
...
box.execute("SELECT CASE 1 WHEN 1 THEN 666 WHEN 2 THEN 123 ELSE 'asd' END")
---
- metadata:
  - name: CASE 1 WHEN 1 THEN 666 WHEN 2 THEN 123 ELSE 'asd' END
    type: scalar
  rows:
  - [666]
...
-- Test basic capabilities of VARBINARY type.
--
box.execute("CREATE TABLE t (id INT PRIMARY KEY, v VARBINARY);")
---
- row_count: 1
...
box.execute("INSERT INTO t VALUES(1, 1);")
---
- error: 'Type mismatch: can not convert 1 to varbinary'
...
box.execute("INSERT INTO t VALUES(1, 1.123);")
---
- error: 'Type mismatch: can not convert 1.123 to varbinary'
...
box.execute("INSERT INTO t VALUES(1, true);")
---
- error: 'Type mismatch: can not convert true to varbinary'
...
box.execute("INSERT INTO t VALUES(1, 'asd');")
---
- error: 'Type mismatch: can not convert asd to varbinary'
...
box.execute("INSERT INTO t VALUES(1, x'616263');")
---
- row_count: 1
...
box.execute("SELECT * FROM t WHERE v = 1")
---
- error: 'Type mismatch: can not convert UNSIGNED to VARBINARY'
...
box.execute("SELECT * FROM t WHERE v = 1.123")
---
- error: 'Type mismatch: can not convert REAL to VARBINARY'
...
box.execute("SELECT * FROM t WHERE v = 'str'")
---
- error: 'Type mismatch: can not convert TEXT to VARBINARY'
...
box.execute("SELECT * FROM t WHERE v = x'616263'")
---
- metadata:
  - name: ID
    type: integer
  - name: V
    type: varbinary
  rows:
  - [1, 'abc']
...
box.execute("SELECT sum(v) FROM t;")
---
- error: 'Type mismatch: can not convert abc to number'
...
box.execute("SELECT avg(v) FROM t;")
---
- error: 'Type mismatch: can not convert abc to number'
...
box.execute("SELECT total(v) FROM t;")
---
- error: 'Type mismatch: can not convert abc to number'
...
box.execute("SELECT min(v) FROM t;")
---
- metadata:
  - name: min(v)
    type: scalar
  rows:
  - ['abc']
...
box.execute("SELECT max(v) FROM t;")
---
- metadata:
  - name: max(v)
    type: scalar
  rows:
  - ['abc']
...
box.execute("SELECT count(v) FROM t;")
---
- metadata:
  - name: count(v)
    type: integer
  rows:
  - [1]
...
box.execute("SELECT group_concat(v) FROM t;")
---
- metadata:
  - name: group_concat(v)
    type: string
  rows:
  - ['abc']
...
box.execute("SELECT lower(v) FROM t;")
---
- error: 'Inconsistent types: expected TEXT got VARBINARY'
...
box.execute("SELECT upper(v) FROM t;")
---
- error: 'Inconsistent types: expected TEXT got VARBINARY'
...
box.execute("SELECT abs(v) FROM t;")
---
- error: 'Inconsistent types: expected number got VARBINARY'
...
box.execute("SELECT typeof(v) FROM t;")
---
- metadata:
  - name: typeof(v)
    type: string
  rows:
  - ['varbinary']
...
box.execute("SELECT quote(v) FROM t;")
---
- metadata:
  - name: quote(v)
    type: string
  rows:
  - ['X''616263''']
...
box.execute("SELECT min(v, x'') FROM t;")
---
- metadata:
  - name: min(v, x'')
    type: scalar
  rows:
  - ['']
...
box.execute("CREATE INDEX iv ON t(v);")
---
- row_count: 1
...
box.execute("SELECT v FROM t WHERE v = x'616263';")
---
- metadata:
  - name: V
    type: varbinary
  rows:
  - ['abc']
...
box.execute("SELECT v FROM t ORDER BY v;")
---
- metadata:
  - name: V
    type: varbinary
  rows:
  - ['abc']
...
box.execute("UPDATE t SET v = x'636261' WHERE v = x'616263';")
---
- row_count: 1
...
box.execute("SELECT v FROM t;")
---
- metadata:
  - name: V
    type: varbinary
  rows:
  - ['cba']
...
box.execute("CREATE TABLE parent (id INT PRIMARY KEY, a VARBINARY UNIQUE);")
---
- row_count: 1
...
box.space.T:truncate()
---
...
box.execute("ALTER TABLE t ADD CONSTRAINT fk1 FOREIGN KEY (v) REFERENCES parent (a);")
---
- row_count: 1
...
box.execute("INSERT INTO t VALUES (1, x'616263');")
---
- error: 'Failed to execute SQL statement: FOREIGN KEY constraint failed'
...
box.execute("INSERT INTO parent VALUES (1, x'616263');")
---
- row_count: 1
...
box.execute("INSERT INTO t VALUES (1, x'616263');")
---
- row_count: 1
...
box.execute("ALTER TABLE t DROP CONSTRAINT fk1;")
---
- row_count: 1
...
box.space.PARENT:drop()
---
...
box.execute("CREATE TABLE t1 (id INT PRIMARY KEY, a VARBINARY CHECK (a = x'616263'));")
---
- row_count: 1
...
box.execute("INSERT INTO t1 VALUES (1, x'006162');")
---
- error: 'Check constraint failed ''CK_CONSTRAINT_1_T1'': a = x''616263'''
...
box.execute("INSERT INTO t1 VALUES (1, x'616263');")
---
- row_count: 1
...
box.space.T1:drop()
---
...
box.execute("CREATE TABLE t1 (id INT PRIMARY KEY, a VARBINARY DEFAULT x'616263');")
---
- row_count: 1
...
box.execute("INSERT INTO t1 (id) VALUES (1);")
---
- row_count: 1
...
box.space.T1:select()
---
- - [1, 'abc']
...
box.space.T1:drop()
---
...
box.execute("SELECT CAST(1 AS VARBINARY);")
---
- error: 'Type mismatch: can not convert 1 to varbinary'
...
box.execute("SELECT CAST(1.123 AS VARBINARY);")
---
- error: 'Type mismatch: can not convert 1.123 to varbinary'
...
box.execute("SELECT CAST(true AS VARBINARY);")
---
- error: 'Type mismatch: can not convert true to varbinary'
...
box.execute("SELECT CAST('asd' AS VARBINARY);")
---
- error: 'Type mismatch: can not convert asd to varbinary'
...
box.execute("SELECT CAST(x'' AS VARBINARY);")
---
- metadata:
  - name: CAST(x'' AS VARBINARY)
    type: varbinary
  rows:
  - ['']
...
